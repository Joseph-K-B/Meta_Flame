/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react';
import * as THREE from 'three';

import { Plane, useGLTF } from '@react-three/drei';
import { useFrame, useLoader, useThree } from '@react-three/fiber';
import { useStore } from '../../../hooks/useStand';

export default function Desk({ ...props }) {
  const page = useStore((state) => state.page);
  const forward = useStore((state) => state.forward);
  
  const [toggle, setToggle] = useState(false)

  const group = useRef();
  const grid = useRef();

  const { camera } = useThree();
  const { nodes, materials } = useGLTF('/desk/desk.glb');

  const texture = useLoader(THREE.TextureLoader, '/desk/bakin.jpg');
  texture.flipY = false;

  const vec = new THREE.Vector3();
  const vecTwo = new THREE.Vector3();

  const _Quaternion = new THREE.Quaternion();
  const _Axis = new THREE.Quaternion();
  const _Rotation = new THREE.Quaternion();

  useFrame((state, delta) => {
    const deskPosition = group.current.position;
    const step = 0.05
    if(page === 0) {
      vec.set(0, 3.0616997, 5);
      vecTwo.set(0, -17, 0);
      camera.position.lerp(vec, step / 2);
      deskPosition.lerp(vecTwo, step * 2)
    }
    if(page === 1) {
      vec.set(0, 0, -1)
      deskPosition.lerp(vec, step)
    }
    if(page === 2) {
      vec.set(5, 10, 5)
      camera.position.lerp(vec, step)
    }
    if(page === 3) {
      vec.set(0, 1, -10)
      camera.position.lerp(vec, step)
    }
    if(page === 4) {
      vec.set(0, 1, -3.5)
      vecTwo.set(0, 0, 0);
      vecTwo.set(0, 0, 0);
      camera.position.lerp(vec, step)
      grid.current.position.lerp(vecTwo, step / 2)
    }
    if(page === 5) {
      vec.set(0, 3, -5);
      vecTwo.set(0, 0, -100);
      // camera.position.lerp(vec, step);
      // deskPosition.lerp(vecTwo, step / 2)
      grid.current.position.lerp(vecTwo, step * 0.05)
    }
    if(page === 6) {
      vec.set(0, 3, -5);
      vecTwo.set(0, -15, 0);
      camera.position.lerp(vec, step);
      deskPosition.lerp(vecTwo, step / 2)
    }
    if(!forward && page === 5) {
      vec.set(0, 0, -1);
      vecTwo.set(0, 1, -3.5);
      deskPosition.lerp(vec, step);
      camera.position.lerp(vecTwo, step);
    }
    if(toggle) {
    }
    if(toggle) {
      vec.set(-2, 0.5, -2.45)
      // _Axis.set(0, 1, 0)
      // _Quaternion.setFromAxisAngle(
      //   _Axis,
      //   -(Math.PI / 6) * delta
      // )
      // _Rotation.multiply(_Quaternion) 
      // group.current.quaternion.slerp(_Rotation, step)
      camera.position.lerp(vec, step); 
      
    }
    // group.current.rotation.set(0, -Math.PI / 6, 0) 
    // camera.position.set(0, 0.5, -2.45)
  });

  const handleToggle= () => {
    setToggle(!toggle)
    console.log(group.current.quaternion)
  }

  return (
    <>
    <group 
    ref={group}
    scale={0.25}
      dispose={null}
    >
      <gridHelper />
      <mesh
        onClick={handleToggle} 
        geometry={nodes.Cube.geometry} 
        // material={nodes.Cube.material} 
        // position={[2.31, 3.74, 2.87]} 
        position={[0, 0, 0]} 
        // rotation={[-Math.PI, -0.64, -Math.PI]} 
        rotation={[0, Math.PI, 0]} 
        scale={[3.38, 0.29, 2.03]} 
        >
        <meshBasicMaterial 
          map={texture}
        />
      </mesh>
      <Plane
        ref={grid}
        args={[10, 100, 10, 100]}
        position={[0, 0, 100]} 
        rotation={[-Math.PI / 2, 0, 0]}
        visible={page > 3 ? true : false}
      >
        <meshBasicMaterial color='purple' wireframe />
      </Plane>
      </group>
    </>
  )
}

useGLTF.preload('/desk/desk.glb');

// _w: 0.9391038569030381
// _x: 0
// _y: -0.3436334470767328
// _z: 0

// _w: -0.9592101155991457
// _x: 0
// _y: 0.28269409992476435
// _z: 0
